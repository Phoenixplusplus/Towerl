//////////////////////////////////////////
// Kingston University: Module CI6530   //
// Games Creation Processes             //
// Coursework 1: Mobile Game            //
//                                      //
// Team Heron                           //
//                                      //
// December 2018                        //
//                                      //
// TOWERL Code                          //
// TierData.cs                          //
//////////////////////////////////////////

public class TierData
{

    // TIER DATA
    // 24 ints - 0 = gap, 1 = Plain platform, 2 = hazard
    // ordered in "difficulty rating"
    // TOP (element [0]) = Bottom / Home Tier
    // SECOND (element [1]) = DEFAULT TOP TIER (usually at -7.5 rotation)
    // N.B. First Segement has to be a Vanilla Platform ,i.e. 1 - else you will break stuff laterz
private int[,] data = {
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
{1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0},
{1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0},
{1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,2,1,0,0,0,0,0},
{1,1,1,0,0,0,0,0,1,2,1,0,0,0,0,0,1,2,1,0,0,0,0,0},
{1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0},
{1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0},
{1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
{1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,2,1,0,0,0},
{1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0},
{1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,2,2,1,0,0,0,0},
{1,1,1,0,0,0,1,2,1,0,0,0,1,1,1,0,0,0,1,2,1,0,0,0},
{1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,2,2,0,0,0,0,0,0},
{1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0},
{1,1,1,2,0,0,0,0,1,1,1,2,0,0,0,0,1,1,1,2,0,0,0,0},
{1,1,1,2,1,1,0,0,0,0,0,0,1,2,2,1,1,1,0,0,0,0,0,0},
{1,1,2,1,1,1,0,0,0,0,0,0,1,1,2,2,1,1,0,0,0,0,0,0},
{1,2,1,1,1,1,0,0,0,0,0,0,1,1,1,2,2,1,0,0,0,0,0,0},
{1,1,2,2,0,0,0,0,1,1,1,1,0,0,0,0,1,2,1,1,0,0,0,0},
{1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0},
{1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0},
{1,1,1,1,1,1,2,0,0,0,0,0,1,1,1,1,1,1,2,0,0,0,0,0},
{1,1,2,0,0,0,1,1,2,0,0,0,1,1,2,0,0,0,1,1,2,0,0,0},
{1,1,1,1,1,1,0,0,0,0,0,2,1,1,1,1,1,1,0,0,0,0,0,2},
{1,1,0,0,0,2,1,1,0,0,0,2,1,1,0,0,0,2,1,1,0,0,0,2},
{1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0},
{1,1,1,1,1,1,1,0,0,0,0,0,1,1,2,2,1,1,1,0,0,0,0,0},
{1,1,1,1,1,1,1,0,0,0,0,0,1,1,2,2,1,1,1,0,0,0,0,0},
{1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,2,2,1,1,0,0,0,0,0},
{1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,2,2,1,0,0,0,0,0},
{1,1,1,2,2,1,0,0,0,0,0,0,2,2,1,1,1,1,0,0,0,0,0,0},
{1,2,1,1,0,0,0,0,1,2,2,1,0,0,0,0,1,1,2,1,0,0,0,0},
{1,1,1,0,0,0,0,2,1,1,1,2,0,0,0,2,1,1,1,0,0,0,0,2},
{1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,2,2,1,0,0,0},
{1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,2,1,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
{1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
{1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0},
{1,1,1,1,1,1,1,2,0,0,0,0,1,1,1,1,1,1,1,2,0,0,0,0},
{1,1,1,1,2,0,0,0,1,1,1,1,2,0,0,0,1,1,1,1,2,0,0,0},
{1,1,1,1,1,1,1,0,0,0,0,2,1,1,1,1,1,1,1,0,0,0,0,2},
{1,1,1,1,0,0,0,2,1,1,1,1,0,0,0,2,1,1,1,1,0,0,0,2},
{1,1,1,1,1,1,1,1,0,0,0,0,2,1,1,1,1,1,1,2,0,0,0,0},
{1,2,1,1,2,1,1,0,0,0,0,0,1,1,2,1,2,1,1,0,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
{1,1,2,2,2,1,1,0,0,0,0,0,1,2,2,1,1,1,1,0,0,0,0,0},
{1,1,1,1,0,0,1,1,1,1,0,0,1,2,2,1,0,0,1,1,2,1,0,0},
{1,1,1,1,0,0,1,2,2,1,0,0,1,1,1,1,0,0,1,2,1,1,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0},
{1,1,1,1,1,1,1,1,2,0,0,0,1,1,1,1,1,1,1,1,2,0,0,0},
{1,1,1,2,0,0,1,1,1,2,0,0,1,1,1,2,0,0,1,1,1,2,0,0},
{1,1,1,1,1,1,2,0,0,0,0,2,1,1,1,1,1,1,2,0,0,0,0,2},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2},
{1,1,1,1,1,1,1,1,0,0,0,2,1,1,1,1,1,1,1,1,0,0,0,2},
{1,1,1,0,0,2,1,1,1,0,0,2,1,1,1,0,0,2,1,1,1,0,0,2},
{1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,0,0,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0},
{1,1,1,1,1,2,0,0,1,1,1,1,1,2,0,0,1,1,1,1,1,2,0,0},
{1,1,1,2,0,0,0,2,1,1,1,2,0,0,0,2,1,1,1,2,0,0,0,2},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2},
{1,1,1,1,1,0,0,2,1,1,1,1,1,0,0,2,1,1,1,1,1,0,0,2},
{1,1,1,1,2,1,1,1,1,2,1,1,1,1,2,1,1,1,0,0,0,0,0,0},
{1,1,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,0,0,0,0,0,0},
{1,1,2,1,1,2,1,1,0,0,0,0,2,2,2,1,1,1,1,1,0,0,0,0},
{1,2,2,1,1,0,0,0,1,2,2,1,1,0,0,0,2,2,1,1,1,0,0,0},
{1,1,1,2,2,0,0,0,2,1,1,1,2,0,0,0,1,1,1,2,2,0,0,0},
{1,1,1,1,1,1,0,0,1,1,1,1,2,1,0,0,1,1,1,1,2,2,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0},
{1,1,1,1,1,1,1,1,1,2,0,0,1,1,1,1,1,1,1,1,1,2,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,2},
{1,1,1,1,1,1,1,2,0,0,0,2,1,1,1,1,1,1,1,2,0,0,0,2},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2},
{1,1,1,1,1,1,1,1,1,0,0,2,1,1,1,1,1,1,1,1,1,0,0,2},
{1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0},
{1,1,1,2,2,1,1,1,0,0,0,0,1,1,2,1,1,2,2,2,0,0,0,0},
{1,1,2,1,1,2,2,1,0,0,0,0,1,1,1,2,2,2,1,1,0,0,0,0},
{1,1,1,1,2,1,0,0,1,2,1,1,1,1,0,0,2,2,1,1,1,1,0,0},
{1,1,1,2,1,1,0,0,1,1,2,1,1,1,0,0,1,1,2,2,1,1,0,0},
{1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0},
{1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,2},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2},
{1,2,2,1,1,1,0,0,1,1,1,2,1,1,0,0,1,1,1,2,2,1,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,2},
{1,1,1,1,1,1,1,1,2,0,0,2,1,1,1,1,1,1,1,1,2,0,0,2},
{1,1,1,1,2,0,0,2,1,1,1,1,2,0,0,2,1,1,1,1,2,0,0,2},
{1,1,2,0,0,2,1,1,2,0,0,2,1,1,2,0,0,2,1,1,2,0,0,2},
{1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0},
{1,1,1,2,2,2,1,1,1,0,0,0,1,1,2,1,1,2,2,1,1,0,0,0},
{1,1,2,1,1,2,2,1,1,0,0,0,1,1,1,1,2,2,2,1,1,0,0,0},
{1,1,1,1,2,2,1,1,1,1,2,2,1,1,1,1,1,2,2,0,0,0,0,0},
{1,1,2,1,1,1,2,1,1,1,0,0,1,1,1,1,1,2,2,2,1,1,0,0},
{1,1,2,2,1,1,2,2,1,0,0,0,1,1,2,2,2,1,1,1,1,0,0,0},
{1,1,1,1,2,2,1,1,1,1,2,2,1,1,1,1,2,2,1,1,0,0,0,0},
{1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0},
{1,1,1,1,2,2,2,2,1,1,1,1,1,1,2,2,1,1,2,0,0,0,0,0},
{1,1,2,2,1,1,1,2,1,1,0,0,2,2,1,1,1,2,1,1,1,1,0,0},
{1,1,1,2,2,2,1,1,1,1,0,0,1,1,1,2,2,2,1,1,1,1,0,0},
{1,2,2,1,1,1,1,2,2,2,1,1,1,1,1,1,2,2,2,0,0,0,0,0},
{1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,1,2,2,0,0},
{1,1,2,2,2,1,1,1,2,2,2,1,1,1,2,2,1,1,1,0,0,0,0,0},
{1,1,1,2,2,2,1,1,1,1,0,0,1,1,2,2,1,1,2,2,1,1,0,0},
{1,1,1,1,1,1,1,2,2,2,0,0,1,1,2,2,1,1,2,2,1,1,0,0},
{1,1,1,2,2,2,1,1,1,0,0,0,2,2,2,1,1,1,2,2,2,0,0,0},
{1,1,2,2,2,2,2,1,1,1,1,1,1,1,2,2,1,1,1,1,1,0,0,0},
{1,1,1,1,2,2,2,2,1,1,1,1,1,2,2,2,2,1,1,1,0,0,0,0},
{1,1,1,2,2,1,1,1,2,2,1,1,1,2,2,1,1,1,2,2,0,0,0,0},
{1,2,2,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,2,2,1,1,0,0},
{1,1,1,2,2,2,1,1,1,2,2,2,1,1,1,2,2,2,1,1,1,1,0,0},
{1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,0,0},
{1,1,1,1,2,2,2,1,1,1,2,2,2,2,1,1,1,1,2,2,2,2,0,0}
    };

    // Level data ... 66 ints in 33x Tier Number, Rotation pairs
    // These are stored in "reverse" order (depending how you look at it)
    // first pair is Level 1, i.e. immediately above the bottom "home" tier, etc
    // THESE ARE GAME LIVE VALUES - Scaling from 0-1 over the 30 Levels
    // No need to change unless we revise the number of Tiers (and if you reduce number of tiers ... you will break this ... so DON'T !! )
private int[,] LevelData  = {
{27,16,22,134,24,327,21,229,12,151,28,312,24,188,26,90,3,284,24,134,19,134,6,19,16,154,17,337,22,219,17,210,11,216,5,135,21,297,2,218,21,135,27,10,6,212,7,133,23,288,2,292,18,116,6,275,5,300,24,74,12,298,22,347,8,16},
{19,40,29,72,20,10,4,223,13,235,16,66,29,141,26,299,7,217,30,55,17,302,6,330,17,84,30,9,7,350,12,289,10,251,7,335,10,157,3,181,10,325,23,82,15,165,11,2,19,174,20,181,3,8,7,240,13,104,8,225,12,102,16,82,14,42},
{30,161,12,346,34,321,10,49,34,60,19,26,6,180,21,64,16,309,10,350,17,305,16,240,29,98,13,292,31,163,19,303,18,89,16,136,31,27,16,158,20,328,16,43,31,40,21,67,22,25,31,321,29,191,10,138,15,241,16,245,31,346,30,152,31,244},
{37,229,17,4,32,85,20,300,17,75,21,153,14,252,26,126,20,160,17,47,34,84,25,223,21,93,14,44,35,134,30,150,32,189,37,47,25,149,14,201,17,356,19,353,16,325,29,91,21,347,31,261,16,38,10,331,21,302,11,330,22,323,15,25,23,299},
{39,324,34,194,25,278,19,111,14,218,15,265,24,347,24,139,40,193,18,163,17,322,26,44,23,214,32,91,36,194,31,45,40,259,28,77,27,177,21,314,29,286,15,271,39,217,37,174,33,226,25,359,30,323,23,324,33,81,27,297,22,23,19,287,12,313},
{27,47,20,358,34,353,17,244,22,179,36,294,19,250,20,11,20,344,24,146,28,259,27,78,37,90,23,157,16,15,17,183,19,288,38,114,40,75,23,353,34,81,21,172,24,341,40,80,23,145,39,344,24,26,18,276,16,270,18,339,34,86,19,155,36,51},
{28,232,34,77,37,110,21,353,46,212,44,113,21,308,42,321,20,72,40,237,25,169,29,45,26,131,27,341,44,103,23,157,28,184,19,45,38,138,25,255,43,299,32,291,34,133,42,16,30,326,41,303,39,296,34,163,24,104,46,176,45,303,40,307,25,343},
{33,287,47,248,25,220,48,307,32,180,30,133,33,16,33,216,26,50,46,193,42,203,22,188,45,115,38,107,30,328,46,121,36,164,30,146,26,110,30,79,30,261,41,211,22,24,34,241,46,318,48,33,31,261,38,57,39,323,38,212,23,149,24,281,28,64},
{46,234,26,91,39,301,44,66,26,129,49,331,24,296,31,134,44,287,44,92,36,162,26,270,38,76,42,61,33,54,47,243,39,276,48,236,42,19,50,141,35,108,45,254,38,174,45,258,43,35,29,34,43,36,38,198,46,343,28,185,24,329,44,226,33,165},
{33,261,46,311,52,31,37,350,52,313,38,45,41,280,47,179,49,41,38,56,32,303,39,129,39,126,39,111,28,166,35,200,46,268,47,46,27,344,46,295,36,145,50,168,48,15,39,259,51,243,54,102,35,196,46,113,51,288,44,308,54,1,38,107,39,316},
{30,272,45,217,39,247,38,226,53,96,48,180,39,341,53,283,45,7,34,313,51,315,36,237,58,307,51,15,54,135,31,107,35,181,38,223,40,221,48,168,54,208,35,93,48,3,33,68,33,302,40,34,41,117,45,185,37,196,55,214,37,308,38,227,33,99},
{51,182,38,341,36,347,33,55,59,117,36,111,36,177,59,204,57,250,43,45,46,107,41,85,51,79,56,38,47,197,61,78,46,288,45,173,50,194,48,214,38,199,48,0,42,233,51,53,43,143,50,327,54,54,60,277,42,129,57,71,43,97,55,285,49,138},
{38,197,45,108,36,165,38,180,46,355,61,59,57,136,63,11,56,78,58,79,45,98,57,115,44,236,55,264,61,73,44,227,38,262,43,353,54,267,36,54,42,132,39,137,48,352,45,104,39,129,45,71,36,239,43,137,40,156,47,108,59,300,48,167,63,302},
{43,271,57,130,64,350,63,242,39,332,62,308,51,291,51,140,57,206,53,345,45,10,65,23,66,340,67,109,55,223,43,64,52,286,43,320,43,284,54,257,61,16,52,71,48,2,50,329,39,318,46,62,40,278,67,27,47,8,59,298,60,3,61,86,42,80},
{68,343,44,74,46,253,60,171,66,280,60,344,68,90,52,181,57,353,61,277,50,182,45,33,69,286,53,45,59,227,56,89,46,175,54,317,67,235,59,261,57,104,67,349,54,44,60,128,52,80,51,288,52,351,68,326,62,348,62,192,56,77,45,132,58,136},
{61,70,73,67,73,63,66,202,64,295,55,190,56,94,51,305,68,286,59,97,70,65,65,72,66,50,72,224,53,12,47,188,72,341,46,187,50,272,55,101,62,48,45,113,57,332,51,326,73,329,46,3,48,303,46,139,73,77,62,268,47,5,50,284,52,353},
{53,51,61,176,50,244,54,264,75,336,59,57,76,340,74,98,69,158,66,143,71,5,62,57,70,44,61,16,58,328,69,223,73,260,56,232,52,5,57,101,66,62,53,180,50,285,66,202,59,74,62,334,49,147,75,15,59,207,49,110,73,265,50,298,62,186},
{66,127,56,111,56,275,58,195,60,354,56,44,68,45,74,139,51,72,56,266,77,4,58,45,54,6,60,181,66,124,63,64,66,109,72,320,76,105,52,228,64,263,74,255,51,200,69,98,70,255,56,210,76,149,58,148,68,88,62,207,72,234,77,230,73,310},
{72,251,68,342,66,182,59,282,60,67,72,267,82,310,76,152,56,357,78,84,70,191,67,169,74,212,67,174,61,248,65,135,75,344,59,349,74,223,66,218,57,295,76,292,62,311,56,76,54,234,55,101,61,248,74,31,82,204,69,100,71,209,58,211,55,174},
{77,249,83,69,65,345,80,151,84,324,76,106,75,213,63,18,67,78,64,148,69,104,61,268,66,325,62,206,74,44,76,320,67,216,85,260,63,312,82,87,73,260,58,207,58,13,61,23,58,60,57,172,74,227,76,24,70,103,71,356,85,57,57,184,63,269},
{66,266,87,226,66,234,82,209,81,85,70,297,79,66,68,93,65,313,70,214,86,135,78,16,81,267,86,85,76,227,72,110,68,46,69,276,65,242,61,174,82,152,65,216,83,287,65,183,64,338,82,174,69,60,76,275,64,43,80,64,75,181,80,181,81,328},
{70,66,87,90,65,77,80,113,83,164,70,226,79,114,75,71,88,353,88,183,64,286,65,188,80,99,80,338,88,159,71,341,73,297,71,181,67,119,91,151,75,0,85,123,88,30,63,73,78,301,80,349,72,134,66,10,83,153,70,51,88,148,78,158,77,77},
{86,313,77,285,74,291,74,258,66,302,92,211,81,357,80,55,70,211,84,27,67,345,94,41,70,156,82,298,81,180,87,140,78,239,71,311,78,354,78,106,94,358,75,161,84,230,90,302,80,350,67,94,76,96,74,221,67,186,92,217,70,86,80,222,70,335},
{75,227,72,81,74,194,90,201,88,257,93,88,72,293,92,253,70,210,75,111,77,150,96,331,72,263,85,203,76,36,74,155,86,234,90,125,77,274,76,52,71,129,75,115,76,14,86,23,94,355,83,286,92,353,85,131,94,301,75,2,87,125,82,326,75,216},
{98,296,72,125,83,134,77,11,74,256,81,341,92,310,73,30,99,208,79,266,83,145,92,200,100,359,82,144,96,230,90,96,85,135,86,117,72,255,98,102,91,13,93,348,83,222,92,240,75,101,100,24,89,141,73,205,97,295,96,68,100,214,98,327,92,99},
{97,185,95,122,95,214,79,304,94,67,96,289,78,31,77,342,87,7,81,104,76,96,82,142,83,175,79,352,84,216,92,22,96,87,94,64,89,345,82,274,85,36,98,271,99,318,102,188,76,42,102,293,86,351,96,98,90,308,79,193,83,217,103,305,80,150},
{81,319,85,247,91,71,94,46,82,64,86,262,87,11,105,278,89,312,89,121,80,174,97,96,89,241,100,202,98,312,80,285,101,134,101,248,105,334,93,280,78,18,99,63,87,93,81,146,81,109,81,154,78,315,94,78,95,279,99,281,94,101,92,35,88,288},
{94,233,93,315,96,13,91,215,102,150,84,201,99,111,90,135,92,75,109,7,102,342,86,150,100,50,84,17,97,1,95,257,87,54,105,65,93,329,104,281,95,93,89,128,81,63,94,31,89,165,94,198,90,144,83,167,109,23,83,77,82,334,104,134,101,300},
{87,11,105,306,84,214,98,233,94,340,84,283,84,176,97,334,91,15,110,252,88,93,100,25,110,215,85,69,105,197,112,188,94,314,86,333,110,257,101,58,84,225,102,320,92,71,90,282,112,26,89,173,104,340,95,314,97,78,84,90,107,73,103,156,88,315},
{92,68,94,250,101,332,95,323,105,26,106,320,103,9,115,301,88,115,96,80,110,352,91,104,105,193,101,213,97,31,94,104,96,227,95,124,101,55,90,327,106,154,100,358,92,199,90,190,107,343,115,253,93,138,89,346,110,155,96,220,97,196,106,204,101,57}
 };

    // used by the LevelBuilder to get the tier data (and subsequently make the tier and populate IT's Tier Data field)
    public int[] GetTierData(int number)
    {
        int[] ret = new int[24];
        for (int i = 0; i < 24; i++)
        {
            ret[i] = data[number, i];
        }
        return ret;
    }

    // Used by LevelManager to get the game data for the 30 "Story" Levels
    // N.B. accepts 1-30 (only) else will return Level 1 by default
    public int[] GetLevelData(int number)
    {
        int[] ret = new int[66];
        if (number < 1 || number > 30)
        {
            number = 1;
        }
        for (int i = 0; i < 66; i++)
        {
            ret[i] = LevelData[number - 1, i];
        }
        return ret;
    }

    // Used by LevelBuilder to determine the number of Tiers recorded in here (so we can scale up without breaking stuff)
    public int GetPossibleTierCount ()
    {
        return data.GetLength(0);
    }

}
